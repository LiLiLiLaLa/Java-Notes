Meven：项目管理
1.类库的管理（jar包的导入）：管理各种第三方jar
jar包：一个压缩包，里面放着编译好的class文件
2.项目构建（打包发布）
3.项目的标准结构
pom.xml――Meven配置文件                       src――放置所有源代码与测试代码
src――放置所有源代码与测试代码
     ――main――源文件
            ――java
     ――test测试代码
            ――java

Meven使用
mvn package
java -jar打一个jar包

Meven项目的构建
1.通过命令行构建
mvn -B archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1  
-DgroupId=com.bittech.hello -DartifactId=hello-app -Dversion=1.0.0

mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1

-B是自动化生成配置的参数，没有-B就要手动输入配置信息
2.使用开发工具IDEA


Meven中两个关键配置
groupID：项目所属的组织或公司名称
artifactID：项目名称
version：项目版本号

**************pom.xml中的关键配置****************

<dependencies>
         <!-- 配置所有项目需要的第三方jar包 -->
     <dependency>
     <groupId>junit</groupId>
     <artifactId>junit</artifactId>
     <version>4.11</version>
     </dependency>
</dependencies>
在<dependencies>内部导入第三方Jar包，每个Jar包都对应一个 <dependency>标签，通过groupID，artifactID，version来指定不同的Jar包

Meven的生命周期
1.compile（编译）
mvn compile（*.java编译成*.class）
2.clean（清空target目录）
mvn clean
3.test（执行测试用例）
mvn test
4.package（将项目打包）
mvn package
打包生成结果（jar-默认，war）命名按照artifactID加version来命名
在执行package将项目打包过程中会默认执行test命令运行所有测试用例，只要当使用测试用例都通过时才会打包成功。
mvn -DskipTests package：打包过程中不执行测试用例直接打包
****构建可执行jar：****
（1）在pom.xml中添加打包插件并指明主类来使得打包生成的Jar具有可执行能力
（2）使用mvn package将项目打包
（3）java -jar 打包后的jar包
5.install（安装构建到本地仓库）
mvn install
讲项目打包构建到本地仓库后，本机中的其他项目可以使用dependency来引入此此项目
maven寻找jar包顺序：先从本地仓库查找是否存在，若不存在去中央仓库中寻找，若中央仓库中也没找到就报错。
匹配Jar包的规则：根据pom文件中指定的dependency三个关键配置来匹配（groupID――artifactID――version）
6.deploy（安装构建到中央仓库）
7.site（生成网站）
mvn site
将项目信息、依赖等生成网站

Meven：
1.掌握IDEA创建Meven
2.使用pom文件添加依赖