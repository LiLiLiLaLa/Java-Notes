一.super关键字
1.用于表示调用父类方法
a.调用父类构造方法：super(参数列表)
子类调用父类无参构造时，super()可写可不写
子类调用父类有参构造时，super(参数列表)必须要写，告知编译器调用的是哪个父类有参构造
super与this在构造器（构造方法中）不能同时存在，即子类不存在构造方法的互相调用
2.super调用父类普通方法(被覆写的方法)
super.方法名(参数列表)
3.super表示调用父类属性
super.属性名

二.final关键字
1.修饰类：一个类用final关键字修饰后，表示该类不允许被继承（final称为终结器），同时final中所有方法都会被隐式地加上final关键字（不包过成员变量）―>保护性―>final方法常用于模板
eg:String类和八大数据类型（Integer）的包装类
2.修饰方法：一个方法被final修饰后，表示该方法不允许被覆写
3.修饰属性：final修饰属性，表示该属性值不可变，并且该属性要在声明时初始化
a.修饰基本数据类型变量
类中常量一般使用final+static，描述全局常量
全局变量命名规范：多个单词全大写，且单词间以_分隔
eg:public static final int MY_AGE=10;
b.修饰引用数据类型变量


三.多态：同一个类实例的相同方法在不同情形下有不同的表现形式
1.向上转型（90%）
父类 父类引用 = new 子类()；
eg:Person per = new Student()；
2.向下转型（%1）―>需要强制类型转换，用于父类引用需要调用子类扩充方法时
要发生向下转型必须先发生向上转型（运行转换异常：发生在两个不能强转的类之间―>ClassCastException）
子类 子类引用 = (子类)父类实例
eg:Student stu = (Student)per;
3.引用  instanceof  类：表示该引用类型能否指向该类实例，返回boolean（返回ture表示可以，返回false表示不行）
per instanceof Student

四.内部类的定义与使用
1.定义：在一个类中进行其他类的嵌套操作
2.内部类优点
a.内部类和外部类可以访问彼此的私有域（以及公有域）―>（访问方法不同―>四.4.c）
b.内部类可以实现java的单继承局限
c.内部类可以对同一包中的其他类隐藏起来，仅供外部类使用（保护性）
3.内部类缺点：结构复杂
4.内部类和外部类的关系
a.对于非静态内部类而言，内部类的创建需要依靠外部类的实例化对象，在没有外部类对象之前无法创建内部类的对象
b.内部类是一个相对独立的个体，与外部类不是is a的关系
c.内部类可以直接访问外部类元素（包括私有域），但是外部类不可以直接访问内部类元素，需要通过内部类的引用间接访问
5.创建内部类的语法（在外部类之外）
a.创建非静态内部类
外部类.内部类 内部类引用 = new 外部类().new 内部类()；
Outter.Inner in = new Outter().new Inner();
b.创建静态内部类
外部类.内部类 内部类引用= new 外部类.内部类();
Outter.Inner in = new Outter.Inner();
6.内部类的分类
a.成员内部类：
不能存在任何static变量或方法，可以访问外部类的静态域
成员内部类需要依附外部类new Outter().new Inner();
内部类可以使用private封装，表示私有内部类，该内部类仅供外部类使用（HashMap中的Entry内部类，ArrayList中的Node内部类）
b.静态内部类：
静态内部类的创建不需要外部类，可以直接创建
静态内部类不可以访问外部类的所有非static类，但是可以存在自己的成员变量
c.方法内部类

d.匿名内部类
