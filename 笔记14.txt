1.深入理解AQS
1.1.独占锁获取――>acquire(int arg)
1.1.1.tryAcquire再次使用CAS尝试获取同步状态，若成功方法直接返回，当前线程置为持有锁线程，若再次尝试失败，调用addWaiter()

1.1.2.addWaiter()源码

1.1.3.enq()

1.1.4.acquireQueued()

节点从同步队列获取同步状态的前提条件：只有当前驱节点为头结点时，线程才有机会获取同步状态
if(p == head && tryAcquire(arg))

1.1.5.shouldParkAfterFailedAcquire()尝试将前驱节点状态改为Node.SIGNAL，表示此时当前节点应该被阻塞



1.2.独占锁的释放――>release()

unparkSuccessor():唤醒头结点的下一个结点（唤醒距离头结点最近的一个非空结点―>保证公平性），如果它存在的话，此时头结点是当前已经获取到锁的结点

Ctrl + 左键（回退）/右键（进入方法）

1.3.可中断的获取锁
void lockInterruptibly() throws InterruptedException；
最终会调用AQS的acquireInyerruptibly(int arg)模板方法
//增加对中断的判断
//如果检测到线程被检测到异常，那么抛出中断异常
//线程被阻塞时若检测到中断会抛出中断异常后退出

1.4.超时等待―>在中断获取锁的基础上增加超时功能
boolean tryLock(long time, TimeUnit unit) throws InterruptedException;//根据后面传入的时间单位确定超时的时间
该方法本质调用AQS的模板方法tryAcquireNanos(int arg, long nanosTimeout)

doAcquireNanos
//传入时间小于0，方法直接退出，获取线程失败
//格局超时时间计算出截止时间
//再次计算当前截止时间减去当前时间，如果小于0，证明超时，线程直接退出
//在超时时间内仍未被唤醒，那么线程直接退出

1.5.ReentrantLock(Lock中使用频率最高的类)――可重入锁
内建锁隐式支持重入性，synchronized通过获取自增，释放自减的方式实现重入
1.5.1.重入性实现原理
A.线程获取锁的时候，如果已经获取锁的线程是当前线程直接再次获取成功
B.由于锁会被获取N次，那么只有在被释放同样的N次后，该锁才算是完全的释放成功
nonfairTryAcquire
//拿到当前线程
//获取当前线程状态
//当前同步状态还未被获取
//当前线程使用CAS尝试获取同步状态
//此时同步状态不为0，表示已有线程获取到了同步状态
//判断持有线程是否为当前线程
//若是当前线程，同步状态再加1
//将再次加1后的状态写入内存

1.5.2.公平锁和非公平锁
公平锁：锁的获取顺序一定满足时间上的绝对顺序，等待时间最长的线程一定先获取到锁
ReentrantLock默认采用非公平锁（效率更快，吞吐量大）

非公平锁(nonFaurSync)
void lock
//不在队列中的线程可能会直接获取到锁
nonfairTryAcquire

公平锁（FairSync）
void lock
//少了一次CAS过程
tryAcquire
//增加了!hasQueuedPredeccessors()
//当同步队列中存在非空结点，当前结点直接封装为Node结点排队

公平锁和非公平锁对比：
公平锁保证每次取消锁均为同步队列的第一个节点，保证请求资源时间上的绝对顺序，但是效率较低，需要频繁的上下文交换，非公平锁会降低性能开销，降低一定的上下文切换，但是可能导致其他线程永远无法获取到锁造成线程的饥饿现象。通常来讲，没有特性的公平性要求尽量选择非公平锁，同时这个选择也是ReentrantLock的默认选择。

1.6.ReentrantReadWriteLock（可重入读写锁）
读写者模型：读写锁允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程以及其他写线程均会被阻塞。

读锁不等于无锁
A.读锁限制写锁，无锁无法干扰写锁
B.读锁可以控制锁数量

如何区分读状态与写状态
同步状态的高十六位表示读锁获取次数，低十六位表示写锁获取次数

1.6.1.写锁：独占锁
写锁的获取――tryAcquire(int acquires)
//获取读写锁状态
//获取独占式锁状态，即写锁状态
//表示当前有读线程拿到读锁，写线程无法获取同步状态
//写锁的可重入次数已达最大值
//写锁可重入
//此时读写状态为0，写锁可以正常获取到同步状态
//将当前线程置为只有写锁线程

1.6.2.读锁――共享锁（一般与独占锁搭配使用，实现读写者模型）
读锁获取：只要当前没有写线程获取到写锁并且读锁的获取次数不超过最大值，读锁就能获取成功。

读写锁应用场景：缓存实现

1.6.3.写锁的降级
写锁可以降级为读锁但是读锁不能升级为写锁

1.7.Condition的await与signal等待/通知机制
Object的wait与notify是与内建锁（对象监视器）搭配使用，完成线程的等待与通知机制。

Condition的await、signal是与Lock体系配合实现线程的等待与通知，Java语言层面实现，具有更高的控制与扩展性。

Condition有一下三个独有特性：
A.Condition支持不响应中断，而Object提供wait不支持
B.Condition支持多个等待队列，而Object的wait只有一个等待队列
C.Condition支持设置截止时间，而Object的wait只支持设置超时时间

等待方法await()
A.void await() throes InterruptedExceptiom(同await）
――――――――――――――――――――――――――――――――――
B.
C.
D.

1.8.Condition等待队列
――――――――――――――――――――――――――――――――――
线程如何能从await()方法中退出
a.在等待时被中断，通过break退出循环
b.被唤醒后置入同步队列，退出循环

1.9.signal实现原理
//拿到当前等待队列的头结点并唤醒
doSignal

1.10.LockSupport工具类
与内建锁的阻塞区别：内建锁阻塞进入BLOCKED，LockSupport.park()进入WAIT。

唤醒：内建锁由JVM随机挑选一个线程唤醒，Lock.Support.unPark(Thread thread)唤醒指定线程。

1.11.死锁
死锁产生原因：对共享资源的上锁成环

解决死锁算法：银行家算法