1.Java多线程的三种方式

1.1 继承Thread 覆写run方法

1.2 实现Runnable接口，覆写run方法

1.3 实现Callable<V>，覆写call <V>
Future<V> get<V>

Thread.start(Runnable)

FutureTask(Runnable)
FutureTask(Callable)

MyThread th = new MyThread();
FutureTask fu = new FutureTask(th);
new Thread(fu).start();
fu.get();


2.多线程方法

3.线程同步

同步问题产生:

使用synchronized(内建锁)进行同步处理

同步代码块:
a.synchronized(this) {}

b.synchronized(类名.class)-全局锁 {}

Object obj = new Object();
c.synchronized(任意对象,obj);

同步方法:
a.普通方法 // this
b.静态方法-全局锁 // 类名.class

对象锁(monitor)机制是JDK1.6之前synchronized底层原理,又称为JDK1.6重量级锁，
线程的阻塞以及唤醒均需要操作系统由用户态切换到内核态，开销非常之大，因此效率很低。

Lock锁-JDK1.5(juc)-Java语言层锁

JDK1.6之后对于内建锁的优化

1.CAS(Compare and Swap)

悲观锁:线程获取锁(JDK1.6之前内建锁)是一种悲观锁的策略。假设每一次执行临界区代码(访问共享资源)都会产生冲突，所以当前线程获取到锁的同时也会阻塞其他未获取到锁的线程。

乐观锁(CAS操作，无锁操作):假设所有线程访问共享资源时不会出现冲突，由于不会出现冲突自然就不会阻塞其他线程。因此线程就不会出现阻塞停顿的状态。出现冲突时，无锁操作使用CAS(比较交换)来鉴别线程是否出现冲突，出现冲突就重试当前操作直到没有冲突为止。

1.1 CAS操作过程:
CAS可以理解为CAS(V,O,N) : 
V:当前内存地址实际存放的值
O:预期值(旧值)
N:更新的新值


当V=O时，期望值与内存实际值相等，该值没有被任何其他线程修改过，即值O就是目前最新的值，因此可以将新值N赋值给V。

反之，如果V=!O，表明该值已经被其他线程修改过了，因此O值并不是当前最新值，返回V，无法修改。

当多个线程使用CAS操作时，只有一个线程会成功，其余线程均失败。失败的线程会重新尝试(自旋)或挂起线程(阻塞)

内建锁在老版本最大的问题在于:在存在线程竞争的情况下会出现线程的阻塞以及唤醒带来的性能问题，这是一种互斥同步(阻塞同步)。

而CAS不是将线程挂起，当CAS失败后会进行一定的尝试操作并非耗时的将线程挂起，也叫做非阻塞同步。

1.2 CAS的问题

1.2.1 ABA问题
解决:使用atomic AtomicStampedReference类来解决
添加版本号
1A->2B->3A

1.2.2 自旋会浪费大量的CPU资源。
与线程阻塞相比，自旋会浪费大量的处理器资源。因为当前线程仍处于运行状态，只不过跑的是无用指令。
解决:自适应自旋：根据以往自旋等待时能否获取锁，来动态调整自旋的时间(循环次数)。如果在自旋时获取到锁，则会稍微增加下一次自旋的时长；否则就稍微减少下一次自旋时长。

1.2.3公平性
内建锁无法实现公平机制，而lock体系可以实现公平锁。

2.Java对象头
Java对象头Mark Word字段存放内容:

对象的Hashcode

分代年龄

锁标记位

JDK1.6之后一共四种状态锁:

无锁  0 01

偏向锁 1 01

轻量级锁 00

重量级锁 10

根据竞争状态的激烈程度，锁会自动进行升级，锁不能降级(为了提高锁获取与释放的效率)。

3.偏向锁

大多数情况下，锁不紧不存在多线程竞争，而且总是由同一个线程多次获得。为了让线程获取锁的开销降低引入偏向锁。

偏向锁是锁状态中最乐观的一种锁:从始至终只有一个线程请求一把锁。

偏向锁的获取:
当一个线程访问同步块并成功获取到锁时，会在对象头和栈帧中的锁记录字段存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，直接进入。

当线程访问同步块失败时，使用CAS竞争锁，并将偏向锁升级为轻量级锁。

偏向锁的撤销:开销较大
偏向锁使用了一种等待竞争出现才释放锁的机制，所以当其他线程竞争偏向锁时，持有偏向锁的线程才会释放偏向锁，并将锁膨胀为轻量级锁(持有偏向锁的线程依然存活的时候)。

如果持有线程已经终止，则将锁对象的对象头设置成为无锁状态。

JDK6之后偏向锁默认开启。


4.轻量级锁
多个线程在不同的时间段请求同一把锁，也就是不存在锁竞争的情况。针对这种状况，JVM采用了轻量级锁来避免线程的阻塞与唤醒。

5.三种锁特点:

a.偏向锁只会在第一次请求锁时采用CAS操作并将锁对象的标记字段记录下当前线程地址。在此后的运行过程中，持有偏向锁的线程无须加锁操作。
针对的是锁仅会被同一线程持有的状况。

b.轻量级锁采用CAS操作，将锁对象标记字段替换为一个指针，指向当前线程栈上的一块空间，存储着锁对象原本的标记字段。
针对的是多个线程在不同时间段申请同一把锁的情况。

c.重量级锁会阻塞、唤醒请求加锁的线程。针对的是多个线程同时竞争同一把锁的情况。JVM采用自适应自旋，来避免在面对非常小的同步代码块时，仍回被阻塞和唤醒的状况。

6.其他优化
锁粗化
锁粗化就是将多次连接在一起的加锁、解锁操作合并为一次操作。将多个联系的锁扩展为一个范围更大的锁。


锁消除
删除不必要的加锁操作。根据代码逃逸技术，如果判断一段代码中，堆上的数据不会逃逸出当前线程，则认为此代码是线程安全的，无须加锁。

7.生产消费者模型

7.1 wait()-痴汉方法
wait()就是使线程停止运行，会释放对象锁。

I.wait()方法会使当前线程调用该方法后进行等待，并且将该线程置入锁对象的等待队列中，直到接到通知或被中断为止。

II.wait()方法只能在同步方法或同步代码块中调用，如果调用wait()时没有适当的锁，会抛出异常。

III.wait()方法执行后，当前线程释放锁，其他线程可以竞争该锁。

wait()之后的线程继续执行由两种方法:
I.调用该对象的notify()方法唤醒等待线程
II.线程等待时调用interrupt()中断该线程

wait(long time) : 如果到了预计时间还未被唤醒，线程将继续执行。

7.2 notify()
I.notify()方法也必须在同步方法或同步代码块中调用，用来唤醒等待在该对象上的线程。如果有多个线程等待，则任意挑选一个线程唤醒。

II.notify()方法执行后，唤醒线程不会立刻释放对象锁，要等待唤醒线程全部执行完毕后才释放对象锁。

7.3 notifyAll()
唤醒所有在该对象上等待的线程。

7.4线程阻塞
1.调用sleep()方法，主动放弃占有的cpu，不会释放对象锁
2.调用阻塞式IO方法(read()、write())，在该方法返回前，线程阻塞。
3.线程试图获取一个monitor，但该monitor被其他线程所持有导致阻塞。
4.线程等待某个通知,即调用wait(),释放对象锁
5.调用线程suspend()，将线程挂起，容易导致死锁，已被废弃。

7.5monitor的两个队列

每个monitor都有两个队列，一个称为同步队列，一个称为等待队列。
同步队列中存放了因为竞争monitor失败导致阻塞的线程，这些线程等待CPU调度再次竞争锁。
等待队列存放因为调用wait()导致线程等待的线程，唤醒后进入同步队列竞争锁。

8.java.util.lock
8.1Lock简介
Lock lock = new ReentrantLock();
try {
	lock.lock();
	// 以下代码只有一个线程可以运行
	...
}
finally{
	lock.unlock();
}

8.2 lock常用API
lock体系拥有可中断的获取锁以及超时获取锁以及共享锁等内建锁不具备的特性。

void lock(); // 获取锁
void lockInerruptibly() thorws InterruptedException(); // 响应中断锁
boolean tryLock(); // 获取锁返回true，反之返回false
boolean tryLock(long time,TimeUnit unit);// 超时获取锁，在规定时间内未获取到锁返回false
Condition newConditicon(); // 获取与lock绑定的等待通知组件。
void unlock();// 释放锁

ReentrantLock中所有的方法实际上都是调用了其静态内部类Sync中的方法，而
Sync继承了AbstractQueuedSynchronizer(AQS-简称同步器)

8.3 AQS-同步器
同步器是用来构建锁以及其他同步组件的基础框架，它的实现主要是依赖一个int状态变量以及通过一个FIFO队列共同构成同步队列。

子类必须重写AQS的用protected修饰的用来改变同步状态的方法，其他方法主要是实现了排队与阻塞机制。int状态的更新使用getState()、setState()以及compareAndSetState()。

子类推荐使用静态内部类来继承AQS实现自己的同步语义。同步器即支持独占锁，也支持共享锁。

8.4 AQS的模板模式

AQS使用模板方法模式，将一些与状态相关的核心方法开放给子类重写，而后AQS会使用子类重写的关于状态的方法进行线程的排队、阻塞以及唤醒等操作。

锁与AQS关系:
锁面对使用者，定义了使用者与锁交互的接口
同步器面向锁的实现，简化了锁的实现方式，屏蔽同步状态管理，线程排队，等待、唤醒等操作。

8.5 AQS详解
在同步组件中，AQS是最核心部分，同步组件的实现依赖AQS提供的模板方法来实现同步组件语义。

AQS实现了对同步状态的管理，以及对阻塞线程进行排队、等待通知等等底层实现。

AQS核心组成:同步队列、独占锁的获取与释放、共享锁的获取与释放、可中断锁、超时锁。这一系列功能的实现依赖于AQS提供的模板方法。

独占锁:
1.void acquire(int arg) : 独占式获取同步状态，如果获取失败插入同步队列进行等待。
2.void acquireInteruptibly(int arg) : 在1的基础上，此方法可以在同步队列中响应中断
3.boolean tryAcquireNanos(int arg,long nanosTimeOut):在2的基础增加了超时等待功能，到了预计时间还未获得锁直接返回。
4.boolean tryAcquire(int arg) : 获取锁成功返回true，否则返回false
5.boolean release(int arg) : 释放同步状态，该方法会唤醒在同步队列的下一个节点。

共享式锁:
1.void acquireShared(int arg) : 共享获取同步状态,同一时刻多个线程获取同步状态
2.void acquireSharedInterruptibly(int arg) : 在1的基础上增加响应中断
3.boolean tryAcquireSharedNanos(int arg,long nanosTimeOut):在2的基础上增加超时等待
4.boolean releaseShared(int arg) : 共享式释放同步状态

同步队列
在AQS内部有一个静态内部类Node，这是同步队列中每个具体的节点。
节点有如下属性:

int waitStatus:节点状态
Node prev:同步队列中前驱节点
Node next:同步队列中后继节点
Thread thread:当前节点包装的线程对象
Node nextWaiter:等待队列中下一个节点

节点状态值如下:
int INITIAL = 0; // 初始状态
int CANCELLED = 1;// 当前节点从同步队列中取消
int SIGNAL = -1; // 后继节点处于阻塞(WAIT)状态。如果当前节点释放同步状态会通知后继节点，使后继节点继续运行。
int CONDITION = -2; // 节点处于等待队列中。当其他线程对Condition调用signal()方法后，该节点会从等待队列移到同步队列中
int PROPAGATE = -3; // 共享式同步状态会无条件的传播

AQS同步队列采用带有头尾节点的双向链表。

独占锁的获取:acquire(int arg)
获取锁失败后调用AQS提供的acquire(int arg)模板方法

    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
tryAcquire(arg) : 再次尝试获取同步状态，成功直接方法退出，
失败调用addWaiter();

addWaiter(Node.EXCLUSIVE), arg):将当前线程以指定模式(独占式、共享式)
封装为Node节点后置入同步队列
    private Node addWaiter(Node mode) {
    	// 将线程以指定模式封装为Node节点
        Node node = new Node(Thread.currentThread(), mode);
        // 获取当前队列的尾节点
        Node pred = tail;
        // 若尾节点不为空
        if (pred != null) {
            node.prev = pred;
            // 使用CAS将当前节点尾插到同步队列中
            if (compareAndSetTail(pred, node)) {
                pred.next = node;
                // CAS尾插成功，返回当前Node节点
                return node;
            }
        }
        // 尾节点为空 || CAS尾插失败
        enq(node);
        return node;
    }

    private Node enq(final Node node) {
    	// 直到将当前节点插入同步队列成功为止
        for (;;) {
            Node t = tail;
            // 初始化同步队列
            if (t == null) { // Must initialize
                if (compareAndSetHead(new Node()))
                    tail = head;
            } else {
            	// 不断CAS将当前节点尾插入同步队列中
                node.prev = t;
                if (compareAndSetTail(t, node)) {
                    t.next = node;
                    return t;
                }
            }
        }
    }
enq(Node node):当前队列为空或者CAS尾插失败调
用此方法来初始化队列或不断尾插。

final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            // 自旋
            for (;;) {
            	// 获取当前节点的前驱节点
                final Node p = node.predecessor();
                // 获取同步状态成功条件
                // 前驱节点为头结点并且获取同步状态成功
                if (p == head && tryAcquire(arg)) {
                	// 将当前节点设置为头结点
                    setHead(node);
                    // 删除原来的头结点
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
        	// 获取失败将当前节点取消
            if (failed)
                cancelAcquire(node);
        }
    }

acquireQueued()获取锁成功条件:
当前节点前驱为头结点并且再次获取同步状态成功。

private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
        // 获取前驱节点的节点状态
        int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park.
             */
            return true;
            // 前驱节点已被取消
        if (ws > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
            // 不断重试直到找到一个前驱节点状态不为取消状态
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
        } else {
            /*
             * waitStatus must be 0 or PROPAGATE.  Indicate that we
             * need a signal, but don't park yet.  Caller will need to
             * retry to make sure it cannot acquire before parking.
             */
            // 前驱节点状态不是取消状态时，将前驱节点状态置为-1,
            // 表示后继节点应该处于等待状态
            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
        }
        return false;
    }

节点在同步队列中获取锁
失败后调用shouldParkAferFaildAcquire(Node prev,Node node)
此方法主要逻辑
是使用CAS将前驱节点状态置为SIGNAL，表示需要将当前节点阻塞。
如果CAS失败，不断自旋直到前驱节点状态置为SIGANL为止。

acquireQueued():
1.如果当前的前驱节点为头结点并且能够成功获取同步状态，当前线程获得锁成功，方法执行结束。
2.如果获取锁失败，先不断自旋将前驱节点状态置为SIGINAL，
而后调用LockSupport.park()方法将当前线程阻塞。

独占锁的释放:release()
unlock()方法实际调用AQS提供的release()模板方法
  public final boolean release(int arg) {
  	    // 释放状态成功后
        if (tryRelease(arg)) {
        	// 获取当前同步队列的头结点
            Node h = head;
            if (h != null && h.waitStatus != 0)
            	// 唤醒后继节点
                unparkSuccessor(h);
            return true;
        }
        return false;
    }

release()方法是unlock()方法的具体实现。首先获取头结点的后继节点，
当后继节点不为null，
会调用LockSupport.unpark()方法唤醒后继节点包装的线程。
因此，每一次锁释放后就会唤醒队列中该节点的后继节点所包装的线程。

独占锁获取与释放总结:
1.线程获取锁失败，将线程调用addWaiter()封装成Node进行入队操作。
addWaiter()中方法enq()完成对同步队列的
头结点初始化以及CAS尾插失败后的重试处理。

2.入队之后排队获取锁的核心方法acquireQueued(),节点排队获取锁是一个自旋过程。
当且仅当当前节点的前驱节点为头结点并且成功获取同步状态时，
节点出队并且该节点引用的线程获取到锁。
否则，不满足条件时会不断自旋将前驱节点的状态
置为SIGNAL而后调用LockSupport.park()将当前线程阻塞。

3.释放锁时会唤醒后继节点(后继节点不为null)

独占锁特性:

获取锁时响应中断:
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }

    public final void acquireInterruptibly(int arg)
            throws InterruptedException {
        if (Thread.interrupted())
            throw new InterruptedException();
        if (!tryAcquire(arg))
            doAcquireInterruptibly(arg);
    }

获取锁响应中断原理与acquire()几乎一样，唯一区别在于当
parkAndCheckInterrupt()返回true时表示线程阻塞时被中断，
抛出中断异常后线程退出。

超时等待获取锁
tryAcquireNanos(),该方法在三种情况下会返回:
I.在超时时间内，当前线程成功获取到锁。
II.当前线程在超时时间内被中断。
III.超时时间结束，仍未获取到锁，线程退出返回false。

超时获取锁逻辑与可中断获取锁基本一致，
唯一区别在于获取锁失败后，增加了一个时间处理，
如果当前时间超过截止时间，线程不再等待，直接退出，返回false。
否则将线程阻塞置为等待状态排队获取锁。

