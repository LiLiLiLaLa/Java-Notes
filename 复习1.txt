类集――JDK1.2――动态数组：解决数组长度固定问题
Map：保存一对对象的最大父接口
Collection：保存单个对象的最大父接口

Collection
1.总体结构
List（允许数据重复）――ArrayList、Vector、LinkedList
Set（不允许数据重复）――TreeSet（有序存储）、HashSet（无序存储）――内部排序Compareable、外部排序（Comparator）
（Queue）――Deque（双端队列）

2.常用方法（增删查改）

3.集合遍历
Iterator（公有）、ListIterator（List）、Enumeration（Vector）、for-each（都可用）

删除操作:
failFast（快速失败策略）：ConcurrentModificationException（并发修改异常），在遍历集合过程中使用集合的修改方法导致的异常，Connection集合中有一个modCount参数，modCount != expectedModCout时报错，尽量保证并发情况下遍历集合一定返回正确的数据，防止数据脏读，ArrayList、HashSet、HashMap等线程不安全集合
fail-safe：CopyOnWriteArrayList、ConcurrentHashMap等juc包下线程安全集合

4.子类详解（对比）
线程安全性
底层结构
源码级别（初始化策略、扩容策略）

Map：保存一元偶对象
1.在HashMap下有一个子类叫LinkedHashMap，这个LinkedHashMap有序，这个序指的是元素的添加顺序（它底层会维护一个保证添加顺序的链表），而TreeMaori有序，这个序指的是Comparator或Comparable

2.常用方法

3.遍历
Map――>Set
Set接口与Map接口关系：Set是穿了马甲的Map，本质上Set接口的子类都是使用Map来存储元素的，都是将元素存储到key值（所以不允许重复），将value用一个相同的nullObject对象

4.常见子类解析
HashMap源码解：
A.树化、数据结构
DEFAULT_INITIAL_CAPACITY：初始化容量16，桶的数量，数组的个数
DEFAULT_LOAD_FACTOR：负载因子0.75
TREEIFY_THRESHOLD：树化阈值8
MIN_TREEIFY_CAPACITY：树化最少元素个数64
UNTREEIFT_THRESHOLD：解树化，返回链表的阈值6
Node<K,V>[] table：真正存储元素的哈希表

树化逻辑：当一个桶中链表元素个数大于等于8，并且哈希表中所有元素个数加起来超过64，此时会将此桶中链表结构转为红黑树结构，若只是链表个数大于8而哈希表元素不超过64，此时只是简单扩容

树化原因：解决链表过长导致的查找过慢问题，从原来的的O(n)优化为O(log(n))，主要还是处于安全减少哈希碰撞

B.构造函数
同样采用懒加载策略（并不会在对象产生时初始化哈希表）
无参构造：this.loadFactor = DEFAULT_LOAD_FACTOR;//初始化负载因子

C.put与get流程
put方法：若HashMap还未初始化，先进行哈希表初始化操作，默认初始化16个桶；对传入的key值做哈希，得出要存放该元素的桶编号，若没有发生碰撞即头结点为空，将该节点直接存入桶中作为头结点，若发生碰撞，此桶中链表是否已经树化，如果已经树化将节点构造为树节点加入红黑树，若链表未树化，将节点作为链表最后一个节点加入；若哈希表中存在key值相同的元素，替换最新value值，若桶满了（判断size++是否大于threshold），调用resize()扩容哈希表
threshold = 容量（默认16） * 负载因子（默认0.75）

D.哈希算法、扩容与性能
HashMap中的hash方法：无符号右移16位
为何不采用Object类提供的hashCode方法作为桶下标？32位int型，不会发生桶碰撞，哈希表和普通数组基本没有区别，意义不大
为何取出key值的高16位无符号右移参与hash运算？因为hash基本上是在高16位进行hash运算
为何HashMap中容量均为二的n次方？（n - 1）& hash:当n为二的n次方，此时的位运算相当于hash % (n - 1)






























