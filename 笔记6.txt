一.抽象类的定义及使用
定义：抽象类只是比普通类多了一些抽象方法而已。
抽象方法：只声明未实现的方法（没有方法体），抽象方法必须使用abstract来定义，并且抽象方法所在的类也要用abstract来定义。
注：抽象方法只声明未实现，只声明未实现的却不一定是抽象方法eg:本地方法（native）
1.抽象方法使用原则
A.所有抽象方法必须有子类
考点：abstract和final不能同时出现
B.抽象类的子类必须覆写抽象类的所有抽象方法
考点：private和abstract不能同时出现
C.抽象类无法直接创建实例化对象，需要子类向上转型为其实例化

2.抽象类相关约定
A.抽象类一定存在构造方法，子类也一定遵循对象实例化流程，先调用父类构造再调用子类构造
B.抽象类可以没有任何抽象方法，但是此时任然不能直接创建实例化对象
C.final和private都不能和abstract同时出现
D.关于内部抽象类
a.子类只需要覆写外部抽象类中的直接抽象方法即可，内部抽象类的抽象方法不需要覆写
b.如果要覆写内部抽象类的抽象方法，继承类和抽象类结构相同就好了

3.模板设计模式
开闭原则（OCP）：一个软件实体如类、模块或函数应该对扩展开放，对修改关闭。
设计模式：解耦，第三方（高内聚，低耦合）
模板（模板方法）设计模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，模板模式可以使得子类在不改变算法的情况下，重新定义算法中的某些步骤












