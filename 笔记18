Java类集（数据结构——多线程）java.util包下
动态数组（当元素个数达到最大值时，动态增加容量）

1.1.Java类集的产生——JDK1.2
动态数组，解决数组定长问题

1.2.Collection接口——单个对象保存的最顶层父接口
Collection接口以及其子接口在每次进行数据操作时只能对单个对象进行处理

public interface Collection<E> extends Iterable<E>

Iterable<E>:迭代器接口（就是为了遍历集合）
Iterator<T> interator;（取得集合的迭代器，JDK1.5之前直接写在Collection接口中）

Collection接口中提供的核心方法：
add(T t)：向类集中添加元素
iterator()：取得类集的迭代器

Collection接口只定义了存储数据的标准，但是无法区分存储类型。因此在实际中我们往往使用两个子接口List（允许数据重复）、Set（不允许数据重复）。一般不直接用Collection接口。

1.3.List接口（80%）——允许数据重复
在进行单个集合处理时，优先考虑List接口，在List接口中，拓展了两个重要接口（List独有）：
public E get(int index)：根据索引下标取得数据
public E set(int index,E element)：根据索引下标更新数据，返回修改之前的数据

List接口有三个重要子类：ArrayList（用的最多的子类90%）、Vector、LinkedList，这三个子类在使用时没有任何区别

List接口要想保存自定义类的对象，该类必须覆写equals()来使用contains()、remove()等方法

************ArrayList、Vector、LinkedList，这三个子类的区别************
A：ArrayList与Vector
a：出现版本区别：ArrayList JDK1.2，Vector JDK1.0（出现在List、Collection接口之前）
b：初始化策略区别：Vector在无参构造执行后将对象数组大小初始化为10，ArrayList采用懒加载策略，在构造方法阶段并不初始化对象数组，在第一次添加元素时才开始初始化对象数组大小为10
c：扩容策略区别：ArrayList扩容时新数组大小变为原数组的1.5倍，而Vector扩容时变为原来的2倍
d：线程安全性区别：ArrayList采用异步处理，线程不安全但效率较高，Vector采用在方法上加锁，线程安全但是效率较低（即便要使用线程安全的List，也不用vector）
e：遍历区别：Vector支持较老的迭代器Enumeration，ArrayList不支持

共同点：都实现了List接口，底层均使用数组实现

B：ArrayList与LinkedList
ArrayList底层使用双向链表实现，ArrayList底层采用数组实现

1.4.Set接口：不允许数据重复
Set接口没有扩充方法

Set常用子类
HashSet：无序存储
底层使用哈希表和红黑树
HashSet允许存放空值，无序存储

TreeSet：有序存储：Comparable、Compartor
底层使用红黑树
不允许出现空值，有序存储
自定义要想保存到TreeSet中，要么实现Comparable接口，要么想TreeSet传入比较器（Compartor接口）

Comparable接口与Compartor接口区别：
在Java中，若想实现自定义的比较，提供了以下两个接口
A：java.lang.Comparable接口（内部比较器）——排序接口
若一个类实现了Comparable接口，就以意味着该类支持排序。存放该类的Collection或数组可以直接通过Collections.sort()或Array.sort()进行排序。
实现了Comparable接口的类可以直接存放在TreeSet或TreeMap中

public int compareTo(T o);
返回值三种情况：
返回正数表示当前对象大于目标对象
返回负数表示当前对象小于目标对象
返回0表示当前对象等于目标对象
