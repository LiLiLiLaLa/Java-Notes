1.Comparator（外部排序接口）――相比于Comparable接口更加灵活
若要控制某个自定义类的顺序，而该类本身不支持排序（类的本身没有实现Comparable接口），我们可以建立一个该类的“比较器”来进行排序，比较器实现Comparator接口即可。

“比较器”：实现了Comparator接口的类作为比较器，通过该比较器来进行类的排序。

int compare(T o1,T o2);
返回值和Compare to一样
返回正数表示 o1 > o2
返回负数表示 o1 < o2
返回0表示 o1 = o2

实现了Comparator接口进行第三方排序――策略模式，此方法更加灵活，可以轻松改变策略进行第三方的排序算法。

Comparable与Comparator接口的关系：Comparable是排序接口，若类实现了Comparable接口，意味着该类支持排序，是一个内部比较器（自己去和别人比）；Comparator接口是比较器接口，类本身不支持排序，专门有若干个第三方的比较器（实现了Comparator接口的类）来进行类的排序，是一个外部比较器（策略模式）。 

重复元素的比较TreeSet与TreeMap依靠Comparator或Comparable接口来区分重复元素。自定义类想要保存在TreeSet或TreeMap中：
a.要么该类直接实现Comparable接口，覆写compareTo方法
b.要么实现一个比较器传入TreeSet或TreeMap来进行外部比较

而HashSet与HashMap并不依赖比较接口。此时要想区分自定义的元素是否重复，需要同时覆写equals与hashCode方法。

首先覆写equals()方法来判断两个元素内容是否相等。

覆写equals方法原则：
a.自反性：对于任何非空引用值x，x.equals(x)都返回true
b.对称性：对于任何非空的x和y，当且仅当x.equaks(y)返回true，那么y.equals(x)也返回true
c.传递性：对于任何非空的x，y，z，如果x.equals(y)返回true，y.equals(z)返回true，一定有x.equals(z)返回true
d.一致性：对于任何非空的x，y，若x与y中属性没有变，多次调用x.equals(y)始终返回true或false
e.非空性：对于任何非空引用x，x.equals(null)一定返回false

public boolean equals(Object obj){
//自反性
if(obj == this){
return true;
}
//非空性
else if(obj == null){
return false;
}
else if(!(obj instanceof Person)){
return false;
}
//比较属性
Person per = (Person)obj;
return per.age.equals(this.age) && per.name.equals(this.name);
}

哈希表存放数据过程：
先调用hashCode计算出对象hash码决定存放的数据桶，而后使用equals来比较元素是否相等，若相等则不再放置元素；若equals返回false，则在相同桶之后，使用链表将若干元素链起来。

Object类提供的hashCode方法默认使用对象的地址进行hash

若两个对象equals方法返回true，他们的hashCode必然要保证相等，两个对象的hashCode相同，他们的equals方法不一定相等。当且仅当hashCode与equals方法均返回true，才认为两个对象相等。

 哈希表：为何要分桶来存放元素？
为了优化比较次数

2.集合输出（迭代器输出）――Iterator接口
迭代器：为了遍历集合而生。――迭代器模式

Iterator接口两个核心方法：
boolean hasNext()；判断是否还有元素
E next()；取得下一个元素

2.1.迭代输出Iterator――只能从前向后输出（只有Collection接口提供）
调用Collection集合子类的Iterator方法取得内置的迭代器，使用一下输出格式

while(iterator.hasNext()){
System.out.println(iterator.next());
}

import java.util.*;
//取得Iterator迭代器来输出
public class test{
public static void main(String[] args) {
List<String> list = new ArrayList<>();
list.add("Hello");
list.add("My");
list.add("Son");
//取得ArrayList的迭代器
Iterator<String> iterator = list.iterator();
while(iterator.hasNext()){
System.out.println(iterator.next());
}
}
}
//输出
//Hello
//My
//Son

2.2.双向迭代窗口ListIterator――可以从前向后也可以从后往前（List接口提供，Set不支持）
boolean hasNext()；判断是否还有元素
E next()；取得下一个元素
hasPrevious()；判断是否有上一个元素
previous()；取得上一个元素
注：要想使用从后向前遍历，首先至少要从前向后遍历一次

import java.util.*;

public class test{
public static void main(String[] args) {
List<String> list = new ArrayList<>();
list.add("Hello");
list.add("My");
list.add("Son");
//取得ArrayList的双向迭代器
ListIterator<String> iterator = list.listIterator();
while(iterator.hasNext()){
System.out.println(iterator.next());
}
System.out.println("------------------------");
while(iterator.hasPrevious()){
System.out.println(iterator.previous());
}
}
}
//输出
//Hello
//My
//Son
//------------------------
//Son
//My
//Hello

2.3.Enumeration（JDK1.0）枚举输出――只有Vector类支持
hasMoreElement()：判断是否有下一个元素
nextElements()：取得下一个元素

import java.util.*;

public class test{
public static void main(String[] args) {
Vector<String> vector = new Vector<>();
vector.add("Hello");
vector.add("My");
vector.add("Son");
Enumeration<String> enumeration = vector.elements();
while(enumeration.hasMoreElements()){
System.out.println(enumeration.nextElement());
}
}
}
//输出
//Hello
//My
//Son

2.4.for-each输出（所有子类都满足）
能使用foreach输出的本质在于各个集合类都内置了迭代器

2.5.fail-fast机制：快速失败策略
ConcurrentModificationException发生在Collection集合使用迭代器遍历时，使用了集合类提供的修改集合内容的方法报错。而如果使用Iterator迭代器的remove()方法则不会出现此错误。


final void checkForComodification(){
if(modCout != expectedModCount)
throw new ConcurrentModificationExeption();
}

Collection集合中的modCount表示当前集合修改的次数。多并发是时防止用户遍历时集合内容被修改，防止读脏数据。

expectedModCount是迭代器中记录当前集合的修改次数。当取得集合迭代器时（即调用list.iterator()），expectedModCount = modCount，换言之，迭代器就是当前集合的一个副本（拷贝）。

快速失败策略保证了所有用户在进行迭代器遍历集合时，拿到的数据一定是最新的数据（避免“脏读”产生 ）

fail-safe：不产生ConcurrentModificationException异常，juc包下所有线程安全集合（CopyOnWriteArrayList）

总结：以后在迭代器遍历时不要修改集合内容

3.Map集合
Map接口是保存二元偶对象（键值对）的最顶层接口
public interface Map<K,V>
key值唯一，通过一个key值一定能找到唯一一个value值，反之则不一定。我们将这种K、V值叫做键值对

Map接口核心方法
public V put(K key,V value)：向Map中添加数据
public V get(K key)：根据指定的Key值取得相应的Value值，若没有key值返回null
public Set<Map.Entry<K,V>> entrySet()：将Map集合变为Set集合
public Set<K> keyset()：返回所有key值集合，key不能重复
public Collection<V> values()：返回所有value值，value可以重复

Map本身是一个接口，在Map之下有四个常用子类：HashMap（使用频率最高―必考）、TreeMap、ConcurrentMap、HashTable

Map接口使用：
HashMap类比HashSet
a.允许key和value为null，且key值有且只有一个为null，value可以有任意多个null
b.JDK1.2产生
c.异步处理效率高，线程不安全
d.底层是哈希表+红黑树（JDK8），JDK8以前只有红黑树

HashTable
a.key与value均不允许为null
b.JDK1.0产生
c.使用方法上加锁，效率低，线程安全
d.底层哈希表