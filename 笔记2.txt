一.初见String类：默认null
字符串常量用“”表示
String类与任何其他类型做“+”操作时，首先都会将其他类型转化为String类型后再进行操作

二.逻辑运算符（| 和 || 以及&&）
|:多个运算符都需要判断
||：短路或，当多个条件有一个返回true，剩余条件不必再判断（推荐）

三.switch......case......分支语句：没有break，则switch会执行满足条件后的所有程序

四.java中，方法的定义与使用（直接在主方法中调用）
public static 方法返回值 方法名称（[参数类型 参数值.....]）{
     方法体代码
     [return 返回值]；
}

五，方法重载：在同一个类中，方法名称相同，参数的类型或个数不同
编码规范：重载的方法返回值一定要保持相同，不能有两个名字相同、参数类型也相同却返回不同类型值的方法

 六.Java数组：一组相关类型的变量集合，可以通过统一的方式来操作（引用数据类型）
1.数组的动态初始化
数据类型[] 数组名称 = new 数据类型[数组长度]
eg:int[] data = new int[5];
a.数组元素访问通过索引完成，下标默认从0开始。如果索引下标超过数组长度，会抛出数组越界异常（运行时异常）
b.动态初始化后的数组，每个元素都有其默认值（基本类型默认值是各个基本数据类型的默认值，引用类型默认null）
c.查看数组长度：数组名称.length
d数组遍历推荐使用for-each循环（只限于读取数据，修改数组内容还是使用原来的循环）
for(int tmp : data)
2.数组的引用传递
引用：堆内存别名，4字节，在栈上分配空间，指向一块堆内存地址
3.数组的静态初始化
简化格式：数据类型[] 数组名称 = {值1，值2........}
完整格式：数据类型[] 数组名称 =new 数据类型[] {值1，值2........}
数组长度在数值定以后固定，不可变。
4.匿名数组

七.二维数组
动态初始化：数据类型[][] 数组名称 = new 数组类型[行个数][列个数]；
静态初始化：
数组类型[][] 数组名称 = new 数据类型[][]{{第一行的值....},{第二行的值....}.....}

八.数组与方法互操作
1.方法接收数组
2.方法返回数组
3.方法修改数组

九.java对数组的支持
1.排序
java.util.Arrays.sort(数组名称)
支持八大基本数据类型，默认升序排序，内部采用双轴快速排序。
2.数组部分拷贝
System.arraycopy（源数组名称，源数组开始点，目标数组名称.目标数组开始点，拷贝长度）
3.数组全拷贝
java.util.Arrays.copyOf（源数组名称，新数组长度） ： int[]
java类集的动态扩容就采用此方法