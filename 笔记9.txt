一.单例模式：一个类只允许产生一个实例化对象（没有要求就写饿汉式单例）
懒汉式单例（有线程安全问题，并发很高时可能出现两个对象）：用时再new

class Singleton1{
    public static Singleton1 s;
    private Singleton1(){}
    public static Singleton1 getSingleton(){
        if(s == null){
            s = new Singleton1();
        }
        return s;
    }
}
饿汉式单例：先new为敬

class Singleton{
    private static final Singleton SINGLETON = new Singleton();//final是为了不让别人更改
    private Singleton(){}
    public static Singleton getSingleton(){
        return SINGLETON;
    }
}

二.多例模式：只是比单例模式多了些内部实例化对象而已
无论单例还是多例：
a.构造方法私有化
b.类内部提供静态方法返回有限个数对象

三.异常体系
Error：描述Java运行时内部错误与资源耗尽错误。这种内部错误一旦出现，除了告知用户并使程序安全终止以外，再无能为力。
Exception（程序出错）：
A.IOException：程序本身没问题，由于IO处理导致的程序错误
RuntimeException：由于程序错误导致的
非受查异常（无需强制处理）：继承于Error或RuntimeException（空指针异常，类型转换异常，数组越界异常）的异常类称为非受查异常
受查异常（必须强制处理）：直接继承于Exception与IOException的称为受查异常

四.异常处理格式


try{
   可能出现异常的语句
}[catch(异常类 对象)]{
   出现异常的操作
}[finally]{
   异常出口
}
try.....catch....
try.....finally....
try.....catch.....finally
无论try catch中是否有返回语句，最终都会执行finally块

打印错误堆栈的方法：

e.printStackTrace()
1.throws关键字->作用于方法上
在进行方法定义时，如果要明确告诉调用者本方法可能产生哪些异常，可以使用throws方法进行声明，表示将异常抛回给调用方，并且当方法出现问题后可以不进行处理

2.throw关键字->用在方法中
throw语句直接写在方法中，表示人为进行异常抛出。如果异常类对象不希望由JVM产生而通过用户产生，就可以使用throw语句来实现。一般与自定义的异常类搭配使用。

五.断言：启动断言需要使用-ea参数传给虚拟机，手工开启，默认不开启断言。
AssertionError：断言异常（错误）->非受查异常
























